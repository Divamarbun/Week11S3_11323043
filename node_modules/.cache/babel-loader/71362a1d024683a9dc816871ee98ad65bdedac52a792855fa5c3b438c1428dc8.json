{"ast":null,"code":"var _jsxFileName = \"D:\\\\Perkuliahan\\\\11323043_Diva Lorenza Marbun\\\\11323043_Diva Lorenza Marbun\\\\game-tictac\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ToggleButton.css'; // Importing a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ToggleButton() {\n  _s();\n  // State to track the button's state (on/off)\n  const [isOn, setIsOn] = useState(false);\n  // State to track the countdown timer\n  const [timer, setTimer] = useState(10);\n  // State to track the custom timer duration input\n  const [inputValue, setInputValue] = useState('');\n\n  // Function to handle click event\n  const handleClick = () => {\n    // Toggle the state\n    setIsOn(!isOn);\n    // Reset the timer\n    setTimer(parseInt(inputValue) || 10); // Use input value or default to 10 if empty or invalid\n  };\n\n  // Function to handle reset event\n  const handleReset = () => {\n    setIsOn(false); // Reset button state\n    setInputValue(''); // Reset input value\n    setTimer(10); // Reset timer\n  };\n\n  // Effect to update timer every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (isOn && timer > 0) {\n        setTimer(prevTimer => prevTimer - 1);\n      }\n    }, 1000);\n\n    // Clear interval on component unmount or state change\n    return () => clearInterval(interval);\n  }, [isOn, timer]);\n\n  // Conditional rendering of reset button based on timer\n  const renderResetButton = () => {\n    if (isOn && timer === 0) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        className: \"reset-button\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 14\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toggle-button-container\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      className: isOn ? 'on' : 'off',\n      children: [\" \", isOn ? 'Turn Off' : 'Turn On']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), renderResetButton(), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: isOn ? `The button is on. Timer: ${timer}` : 'The button is off'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"timerInput\",\n        children: \"Set Timer Duration:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"timerInput\",\n        type: \"number\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        min: \"1\",\n        max: \"60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" seconds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(ToggleButton, \"vIl8KkMuqCqyMYJDdv+yFyixUHg=\");\n_c = ToggleButton;\nexport default ToggleButton;\nvar _c;\n$RefreshReg$(_c, \"ToggleButton\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ToggleButton","_s","isOn","setIsOn","timer","setTimer","inputValue","setInputValue","handleClick","parseInt","handleReset","interval","setInterval","prevTimer","clearInterval","renderResetButton","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","type","value","onChange","e","target","min","max","_c","$RefreshReg$"],"sources":["D:/Perkuliahan/11323043_Diva Lorenza Marbun/11323043_Diva Lorenza Marbun/game-tictac/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ToggleButton.css'; // Importing a CSS file for styling\n\nfunction ToggleButton() {\n  // State to track the button's state (on/off)\n  const [isOn, setIsOn] = useState(false);\n  // State to track the countdown timer\n  const [timer, setTimer] = useState(10);\n  // State to track the custom timer duration input\n  const [inputValue, setInputValue] = useState('');\n\n  // Function to handle click event\n  const handleClick = () => {\n    // Toggle the state\n    setIsOn(!isOn);\n    // Reset the timer\n    setTimer(parseInt(inputValue) || 10); // Use input value or default to 10 if empty or invalid\n  };\n\n  // Function to handle reset event\n  const handleReset = () => {\n    setIsOn(false); // Reset button state\n    setInputValue(''); // Reset input value\n    setTimer(10); // Reset timer\n  };\n\n  // Effect to update timer every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (isOn && timer > 0) {\n        setTimer(prevTimer => prevTimer - 1);\n      }\n    }, 1000);\n\n    // Clear interval on component unmount or state change\n    return () => clearInterval(interval);\n  }, [isOn, timer]);\n\n  // Conditional rendering of reset button based on timer\n  const renderResetButton = () => {\n    if (isOn && timer === 0) {\n      return <button onClick={handleReset} className=\"reset-button\">Reset</button>;\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"toggle-button-container\"> {/* Applying a CSS class for styling */}\n      <button onClick={handleClick} className={isOn ? 'on' : 'off'}> {/* Applying dynamic class based on state */}\n        {isOn ? 'Turn Off' : 'Turn On'}\n      </button>\n      {renderResetButton()} {/* Render reset button conditionally */}\n      <p>{isOn ? `The button is on. Timer: ${timer}` : 'The button is off'}</p> {/* Displaying status message */}\n      <div>\n        <label htmlFor=\"timerInput\">Set Timer Duration:</label>\n        <input\n          id=\"timerInput\"\n          type=\"number\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          min=\"1\"\n          max=\"60\"\n        />\n        <span> seconds</span>\n      </div>\n    </div>\n  );\n}\n\nexport default ToggleButton;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7B,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACvC;EACA,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMY,WAAW,GAAGA,CAAA,KAAM;IACxB;IACAL,OAAO,CAAC,CAACD,IAAI,CAAC;IACd;IACAG,QAAQ,CAACI,QAAQ,CAACH,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;EACxC,CAAC;;EAED;EACA,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBP,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IAChBI,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;IACnBF,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChB,CAAC;;EAED;EACAR,SAAS,CAAC,MAAM;IACd,MAAMc,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC,IAAIV,IAAI,IAAIE,KAAK,GAAG,CAAC,EAAE;QACrBC,QAAQ,CAACQ,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;MACtC;IACF,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACT,IAAI,EAAEE,KAAK,CAAC,CAAC;;EAEjB;EACA,MAAMW,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIb,IAAI,IAAIE,KAAK,KAAK,CAAC,EAAE;MACvB,oBAAOL,OAAA;QAAQiB,OAAO,EAAEN,WAAY;QAACO,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAC9E;IACA,OAAO,IAAI;EACb,CAAC;EAED,oBACEvB,OAAA;IAAKkB,SAAS,EAAC,yBAAyB;IAAAC,QAAA,GAAC,GAAC,eACxCnB,OAAA;MAAQiB,OAAO,EAAER,WAAY;MAACS,SAAS,EAAEf,IAAI,GAAG,IAAI,GAAG,KAAM;MAAAgB,QAAA,GAAC,GAAC,EAC5DhB,IAAI,GAAG,UAAU,GAAG,SAAS;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,EACRP,iBAAiB,CAAC,CAAC,EAAC,GAAC,eACtBhB,OAAA;MAAAmB,QAAA,EAAIhB,IAAI,GAAI,4BAA2BE,KAAM,EAAC,GAAG;IAAmB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,KAAC,eAC1EvB,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAOwB,OAAO,EAAC,YAAY;QAAAL,QAAA,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACvDvB,OAAA;QACEyB,EAAE,EAAC,YAAY;QACfC,IAAI,EAAC,QAAQ;QACbC,KAAK,EAAEpB,UAAW;QAClBqB,QAAQ,EAAGC,CAAC,IAAKrB,aAAa,CAACqB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC/CI,GAAG,EAAC,GAAG;QACPC,GAAG,EAAC;MAAI;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACFvB,OAAA;QAAAmB,QAAA,EAAM;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACrB,EAAA,CAhEQD,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAkErB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}